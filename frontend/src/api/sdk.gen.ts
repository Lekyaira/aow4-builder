// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { SpeciesFormsData, SpeciesFormsResponses, SpeciesFormsErrors, SpeciesTraitsData, SpeciesTraitsResponses, SpeciesTraitsErrors, CulturesData, CulturesResponses, CulturesErrors, CultureTraitsData, CultureTraitsResponses, CultureTraitsErrors, RulerTypesData, RulerTypesResponses, RulerTypesErrors, TomesData, TomesResponses, TomesErrors, TomesByAspectPathData, TomesByAspectPathResponses, TomesByAspectPathErrors, TomesByTierPathData, TomesByTierPathResponses, TomesByTierPathErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const speciesForms = <ThrowOnError extends boolean = false>(options?: Options<SpeciesFormsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SpeciesFormsResponses, SpeciesFormsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/species/forms',
        ...options
    });
};

export const speciesTraits = <ThrowOnError extends boolean = false>(options?: Options<SpeciesTraitsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SpeciesTraitsResponses, SpeciesTraitsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/species/traits',
        ...options
    });
};

export const cultures = <ThrowOnError extends boolean = false>(options?: Options<CulturesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CulturesResponses, CulturesErrors, ThrowOnError>({
        responseType: 'json',
        url: '/cultures',
        ...options
    });
};

export const cultureTraits = <ThrowOnError extends boolean = false>(options?: Options<CultureTraitsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CultureTraitsResponses, CultureTraitsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/cultures/traits',
        ...options
    });
};

export const rulerTypes = <ThrowOnError extends boolean = false>(options?: Options<RulerTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RulerTypesResponses, RulerTypesErrors, ThrowOnError>({
        responseType: 'json',
        url: '/rulers/types',
        ...options
    });
};

export const tomes = <ThrowOnError extends boolean = false>(options?: Options<TomesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TomesResponses, TomesErrors, ThrowOnError>({
        responseType: 'json',
        url: '/tomes',
        ...options
    });
};

export const tomesByAspectPath = <ThrowOnError extends boolean = false>(options: Options<TomesByAspectPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TomesByAspectPathResponses, TomesByAspectPathErrors, ThrowOnError>({
        responseType: 'json',
        url: '/tomes/by-aspect/{aspect}',
        ...options
    });
};

export const tomesByTierPath = <ThrowOnError extends boolean = false>(options: Options<TomesByTierPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TomesByTierPathResponses, TomesByTierPathErrors, ThrowOnError>({
        responseType: 'json',
        url: '/tomes/by-tier/{tier}',
        ...options
    });
};